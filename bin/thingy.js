// Generated by CoffeeScript 1.10.0
(function() {
  var Magic, Thingy;

  Magic = function() {
    var spells;
    spells = {};
    return {
      listen: function(name, fn) {
        spells[name] = spells[name] || [];
        return spells[name].push(fn);
      },
      silence: function(name, fn) {
        var i, j, ref, results, spell;
        spell = spells[name];
        if (spell) {
          results = [];
          for (i = j = 0, ref = spell.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            if (spell[i] === fn) {
              spell.splice(i, 1);
              break;
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      },
      cast: function(runes) {
        var data, name, spell;
        name = runes.name;
        data = runes.data;
        spell = spells[name];
        if (spell) {
          return spell.forEach(function(fn) {
            return fn(data);
          });
        }
      }
    };
  };

  Magic = new Magic();

  Thingy = function() {
    var things;
    things = {};
    return {
      add: function(thingId, fn) {
        return things[thingId] = {
          fn: fn,
          instance: null
        };
      },
      start: function(thingId) {
        var init, thing;
        thing = things[thingId];
        thing.instance = new thing.fn(Magic);
        init = thing.instance.init;
        if (init) {
          return Promise.resolve(init.call(thing.instance));
        }
      },
      stop: function(thingId) {
        var thing;
        thing = things[thingId];
        if (thing.instance) {
          thing.instance.destroy();
          return thing.instance = null;
        }
      },
      all: function(mode) {
        var j, len, results, thing;
        if (!(mode === "start" || mode === "stop")) {
          return null;
        }
        results = [];
        for (j = 0, len = things.length; j < len; j++) {
          thing = things[j];
          if (things.hasOwnProperty(thing)) {
            results.push(this[mode](thing));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    };
  };

  module.exports = new Thingy();

}).call(this);
