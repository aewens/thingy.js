// Generated by CoffeeScript 1.10.0
(function() {
  (function(root, factory) {
    if (typeof define === "function" && define.amd) {
      return define([], function() {
        return root["Thingy"] = factory();
      });
    } else if (typeof exports === "object") {
      return module.exports = factory();
    } else {
      return root["Thingy"] = factory();
    }
  })(this, function() {
    var Magic, Thingy;
    Magic = function() {
      var _spells;
      _spells = {};
      return {
        listen: function(name, fn, scope) {
          _spells[name] = _spells[name] || [];
          return _spells[name].push({
            fn: fn,
            scope: scope
          });
        },
        silence: function(name, fn) {
          var i, j, ref, results, spell;
          spell = _spells[name];
          if (spell) {
            results = [];
            for (i = j = 0, ref = spell.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
              if (spell[i].fn === fn) {
                spell.splice(i, 1);
                break;
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        },
        cast: function(runes) {
          var data, name, spell;
          name = runes.name;
          data = runes.data;
          spell = _spells[name];
          if (spell) {
            return spell.forEach(function(obj) {
              return obj.fn.call(obj.scope, data);
            });
          }
        }
      };
    };
    Thingy = function() {
      var _things;
      _things = {};
      return {
        Magic: new Magic(),
        add: function(thingId, fn) {
          return _things[thingId] = {
            fn: fn,
            instance: null
          };
        },
        start: function(thingId) {
          var thing;
          thing = _things[thingId];
          thing.instance = new thing.fn(this.Magic);
          if (thing.instance.init) {
            return Promise.resolve(thing.instance.init());
          }
        },
        stop: function(thingId) {
          var thing;
          thing = _things[thingId];
          if (thing.instance) {
            thing.instance.destroy();
            return thing.instance = null;
          }
        },
        all: function(mode) {
          var j, len, results, thing;
          if (!(mode === "start" || mode === "stop")) {
            return null;
          }
          results = [];
          for (j = 0, len = _things.length; j < len; j++) {
            thing = _things[j];
            if (_things.hasOwnProperty(thing)) {
              results.push(this[mode](thing));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      };
    };
    return new Thingy();
  });

}).call(this);
